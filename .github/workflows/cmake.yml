name: CI Build

on: [push]

jobs:
  build:
    name: build-release

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-latest
            adm: sudo
          - build: windows
            os: windows-latest
            adm: ""
    steps:

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install GCC/CMake (Linux)
      shell: bash
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install gcc g++ cmake freeglut3-dev libx11-dev -y

    - name: Install CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install cmake

    - name: Checkout GLFW
      uses: actions/checkout@v2
      with:
        repository: glfw/glfw
        path: glfw

    - name: Checkout gl3w
      uses: actions/checkout@v2
      with:
        repository: skaslev/gl3w
        path: gl3w

    - name: Checkout disluapp
      uses: actions/checkout@v2
      with:
        repository: imring/disluapp
        path: disluapp

    - name: Checkout {fmt}
      uses: actions/checkout@v2
      with:
        repository: fmtlib/fmt
        path: fmt

    - name: Build & install GLFW
      shell: bash
      working-directory: glfw
      run: |
        mkdir build && cd build
        cmake .. -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_DOCS=OFF -DGLFW_INSTALL=ON
        ${{ matrix.adm }} cmake --build . --target install --config Release

    - name: Build & install gl3w
      shell: bash
      working-directory: gl3w
      run: |
        mkdir build && cd build
        cmake ..
        ${{ matrix.adm }} cmake --build . --target install --config Release

    - name: Build & install disluapp
      shell: bash
      working-directory: disluapp
      run: |
        mkdir build && cd build
        cmake .. -DBUILD_DOC=OFF -DBUILD_TEST=OFF
        ${{ matrix.adm }} cmake --build . --target install --config Release

    - name: Build & install {fmt}
      shell: bash
      working-directory: fmt
      run: |
        mkdir build && cd build
        cmake .. -DFMT_DOC=OFF -DFMT_TEST=OFF -DFMT_OS=ON
        ${{ matrix.adm }} cmake --build . --target install --config Release

    - name: Build the project (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir build && cd build
        cmake .. -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        cmake --build . --config Release

    - name: Build the project (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir build && cd build
        cmake ..
        cmake --build . --config Release

    - name: Upload the archive
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}
        path: output/
